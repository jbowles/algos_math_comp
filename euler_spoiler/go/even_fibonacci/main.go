package main

import "fmt"

/*

//typical recursive fib:
func fibR(n int) int {
	if n <= 1 {
		return n
	}
	return fibR(n-1) + fibR(n-2)
}


//python example showing how to do it without checking mod 2 for even
def calcE():
	x = y = 1
	sum = 0
	while (sum < 1000000):
		sum += (x + y)
		x, y = x + 2 * y, 2 * x + 3 * y
	return sum


=================================================
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
=================================================

//this answer knows the size of n to get the fib value over 4M
func fibL(n int) (int, int) {
	f := make([]int, n+1, n+2)
	if n < 2 {
		f = f[0:2]
	}
	f[0] = 0
	f[1] = 1
	for i := 2; i <= n; i++ {
		f[i] = f[i-1] + f[i-2]
	}
	result := 0
	for _, v := range f {
		if v > 4000000 {
			break
		}
		if v%2 == 0 {
			result += v
		}
	}
	return f[n], result
}

	rl, sum := fibL(43)
	fmt.Printf("fibL: %d answer: %d\n", rl, sum)

	=> fibL: 433494437 answer: 4613732
*/

//this fib will increment to its own limit, then sum
func fibL(cieling int) (int, int) {
	n := 2
	f := make([]int, cieling/1000)
	f[0] = 0
	f[1] = 1
	for i := 2; i <= n; i++ {
		//fmt.Printf("%d %d %d\n", f[i], i, n)
		if f[i-1] > cieling {
			break
		}
		n++
		f[i] = f[i-1] + f[i-2]
	}
	result := 0
	for _, v := range f {
		if v > cieling {
			break
		}
		if v%2 == 0 {
			result += v
		}
	}
	fmt.Printf("%d len(f): %d\n", n, len(f))
	return f[n-1], result
}

func main() {
	rl, answer := fibL(4000000)
	fmt.Printf("fibL: %d answer: %d\n", rl, answer)
}
